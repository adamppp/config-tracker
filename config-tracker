#!/bin/bash

# Include config file
[ -f /etc/config-tracker/config-tracker.conf ] && . /etc/config-tracker/config-tracker.conf
[ -f /etc/config-tracker.conf ] && . /etc/config-tracker/config-tracker.conf
[ -f "${0%/*}/config-tracker.conf"  ] && . "${0%/*}/config-tracker.conf"

export GIT_DIR="$repo/.git"
export GIT_WORK_TREE="$repo"

# Set umask so that the git repo will only be accessible to the current user
# (as we may be storing sensitive information). Newer versions of git support
# `git init --shared=0xxx`, but we set umask to maintain compatibility.
umask 0077

#
# Runs first-time initialisation, such as creating the git repo, post-commit
# hooks and crontab entries.
#
init() {

	# Ensure repo dir exists
	[ ! -e "$repo" ] && mkdir -p "$repo"

	# Initialise git repo
	git init -q

	# Install crontab entry if it doesn't already exist
	[ ! -e "/etc/cron.d/config-tracker" ] && cp "${0%/*}/contrib/cron" "/etc/cron.d/config-tracker" && chmod 0644 /etc/cron.d/config-tracker

	# Do an initial sync & commit
	sync
	commit

	# Install latest version of post-commit email hook
	cp "${0%/*}/contrib/post-commit" "$repo/.git/hooks/post-commit"
	chmod +x "$repo/.git/hooks/post-commit"
	reconfigure
}

#
# Reconfigures git options, such as notification email destination.
#
reconfigure() {

	# Set the email address for notifications to go to
	[ -n "$notification_emails" ] && git config hooks.mailinglist "$notification_emails"

	# Set the email subject prefix
	[ -n "$notification_emails_prefix" ] && git config hooks.emailprefix "$notification_emails_prefix"

	# Set filter pattern option
	[ -n "$notification_emails_filter" ] && git config hooks.emailfilefilter "$notification_emails_filter"

	# Set maximum lines of notification emails
	[ -n "$notification_emails_maxlines" ] && git config hooks.emailmaxlines "$notification_emails_maxlines"

	# Set config pattern for sensitive files
	[ -n "$notification_emails_sensitive" ] && git config hooks.emailfilesensitive "$notification_emails_sensitive"
}

#
# Calls rsync to scan for changed files (but doesn't update the repo).
#
scan() {
	rsync -av --dry-run --exclude-from="$exclude_file" --include-from="$include_file" --exclude='*' --delete "$working_root/" "$repo/"
}

#
# Syncs changed files to repo dir
#
sync() {
	rsync -a --exclude-from="$exclude_file" --include-from="$include_file" --exclude='*' --delete "$working_root/" "$repo/"
}

#
# Calls rsync to sync the files into the config working dir and commits the
# changes.
#
update() {
	reconfigure
	sync
	commit
}

#
# Commits changes in repo dir.
#
commit() {

	git add -A

	# Generate log message of changed files
	message="$(git diff --cached --name-status 2>/dev/null)"

	# Use a generic message, eg. for first runs
	[ -z "$message" ] && message="Auto-commit (diff could not be generated)."

	git commit -q -m "$message" >/dev/null
}

#
# Pushes local config repo to remote/central repository.
#
#push() {
#}

if [ "$(type -t $1)" ]; then $1; else echo "Usage: $0 <action>. Where action is one of:" $(compgen -A function) && exit 1; fi
